/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void markTreeWithZero(TreeNode* & root,int i )
    {
        if(root==NULL)
            return;
        if(root->val==i)
        {
            root->val=0;
        }
        else
        {
            if(root->right!=NULL)
               markTreeWithZero(root->right,i);
            if(root->left!=NULL)
               markTreeWithZero(root->left,i); 
        }
     }
    void traverse(TreeNode*  root,TreeNode* & nw, vector<TreeNode*> &result, bool flag)
    {
        if(root==NULL)
            return;
        if(flag==true)
        {
            makeTree(root,nw);
            flag=false;
            if(nw!=NULL)
                result.push_back(nw);
            nw=NULL;
        }
        if(root->val==0)
            flag=true;
        traverse(root->right,nw,result,flag);
        traverse(root->left,nw,result,flag);
    }
    //[1,2,null,4,3]
    void makeTree(TreeNode*  root, TreeNode* & nw)
    {
        if(root==NULL)
            return;
        if(root->val==0)
            return;
        nw=new TreeNode(root->val);
        cout<<root->val<<endl;
        makeTree(root->right,nw->right);
        makeTree(root->left,nw->left);
    }
    vector<TreeNode*> delNodes(TreeNode*  root, vector<int>& to_delete) 
    {
        vector<TreeNode*> result;
        for(int i=0;i<to_delete.size();i++)
            markTreeWithZero(root,to_delete[i]);
        TreeNode* n=NULL;
        bool flag=true;
        traverse(root,n, result,flag);
        return result;
    }
};
