/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum=0;
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root->left== NULL && root->right==NULL)// if the current node has no children
        {
            if(root->val<=high && root->val>=low)
            sum+=root->val;
            return sum; // return sum
        }
        else if(root->left== NULL && root->right!=NULL ) // if the current node has right child
        {
            if(root->val<=high && root->val>=low)
            {
                sum+=root->val; // add the val of current node after checking its range
            }
            return rangeSumBST(root->right,low,high); //recurse on the right child
        }
        else if(root->left!= NULL && root->right==NULL )// if the left child exists
        {
            if(root->val<=high && root->val>=low)
            {
                sum+=root->val; // if the current node va is in the given range
            }
            return rangeSumBST(root->left,low,high);// recurse on the left child
        }
        if(root->left!= NULL && root->right!=NULL)
        {
            if(root->val<=high && root->val>=low)
            {
                sum+=root->val;
            }
            rangeSumBST(root->right,low,high);
            return rangeSumBST(root->left,low,high);
        }
        
        return sum;// there is no node at all, empty tree

    }
};
