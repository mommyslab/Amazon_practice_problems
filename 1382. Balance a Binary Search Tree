/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   void makeVec(TreeNode * root, vector<int> &sortedTree)
    {
        if(root==NULL)
            return;
        makeVec(root->left,sortedTree);
        sortedTree.push_back(root->val);
        makeVec(root->right,sortedTree);
        
    }
    void recurse(int i,int j)
    {
            if(i>j)
                return;
            int mid=(j-i)/2;
            int left=(mid-1)/2;
            int right=(j+mid)/2;
            cout<<mid<<" m "<<left<<" l "<<right<<" r "<<endl;
            recurse(0,left);
            recurse(left,mid);
            recurse(mid,right);
            recurse(right,j);
    }
   void makeTree(TreeNode * &root, vector<int>& sortedTree)
   {
            
        
   }
    void insert(int i,TreeNode*& root)
    {
        if(root==NULL)
            root=new TreeNode(i);
        if(i<root->val)
            insert(i,root->left);
        if(i>root->val)
            insert(i,root->right);
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> sortedTree;
        TreeNode* n=NULL;
        makeVec(root,sortedTree);
        //makeTree(n,sortedTree);
        recurse(0,sortedTree.size()-1);
        return n;
        
    }
};
